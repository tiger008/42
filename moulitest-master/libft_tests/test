#!/usr/bin/python
import sys
import os
import fnmatch
import re
import json
from glob import glob
from subprocess import call, Popen

config = json.loads(open('../config.json').read())
RENDU_PATH = os.path.expanduser(config['libft']['rendu_path'])
TEST_FOLDER_PATH = 'tests'
TEST_FILE_SUFFIX = '.spec.c'
BUILD_MAIN = "main.build.c"
FRAMEWORK_PATH = "../testframework"
FRAMEWORK_SOURCE = FRAMEWORK_PATH + "/testframework.c"

def print_usage():
	print '''\
Usage:
	./test part1
	./test part2            # Also run part1
	./test bonus            # Also run part1 and part2
	./test extra            # Also run part1, part2 and bonus" (You need to set extra tests in config.json)

Correction:
	./test check_forbidden_fn

Options:
	-h --help
'''
	# ./test qperez
	# ./test moulinator
	# ./test all              # Include bonus, qperez and moulinator"

def print_header(testsuite_name):
	print "="*70
	print testsuite_name
	print "="*70

def get_filenames():
	matches = []
	for root, dirnames, filenames in os.walk('tests'):
	  for filename in fnmatch.filter(filenames, '*.spec.c'):
		  matches.append(os.path.join(root, filename))
	filenames = [re.sub(r".*\/(ft_.*).spec.c", r"\1", path) for path in matches]
	return filenames

def build_test_def(filenames):
	output = ""
	for name in filenames:
		path = os.path.join(TEST_FOLDER_PATH, name+TEST_FILE_SUFFIX)
		content = open(path).read()
		output += '''
#ifdef TEST_{name}
UT_TEST({name})
{{
{content}
}}
#endif
'''.format(name=name, content=content)
	return output

def build_test_main_def(filenames):
	output = ""
	for name in filenames:
		output += '''
#ifdef TEST_{name}
	UT_ADD_TEST({name});
#endif
'''.format(name=name)
	return output

def get_main_content():
	filenames = get_filenames()
	test_def_content = build_test_def(filenames)
	test_main_def_content = build_test_main_def(filenames)
	original_file = open("main.c").read()
	main_build_content = (original_file
								.replace("<TEST_DEF_BLOCK>", test_def_content)
								.replace("<MAIN_TEST_BLOCK>", test_main_def_content))
	return main_build_content

def build_extra():
	output = ""
	for fn_name in config['libft']['extra_tests']:
		output += "#define TEST_{}\n".format(fn_name)
	return output

def build_prefix(testsuite):
	part1_def = "#define PART1\n"
	part2_def = "#define PART2\n"
	bonus_def = "#define BONUS\n"
	prefix = ""
	if testsuite == 'part1':
		prefix = part1_def
	elif testsuite == 'part2':
		prefix = part1_def + part2_def
	elif testsuite == 'bonus':
		prefix = part1_def + part2_def + bonus_def
	elif testsuite == 'extra':
		prefix = build_extra() + part1_def + part2_def + bonus_def
	return prefix

def create_main_build(testsuite):
	main_content = get_main_content()
	main_content = build_prefix(testsuite) + main_content
	open("main.build.c", "w").write(main_content)

def build_source():
	call(["make", "re", "-C", RENDU_PATH])

def run_moulitest(arg):
	OUT_FILE = "./a.out"
	try:
		os.remove(OUT_FILE)
	except OSError:
		pass
	create_main_build(arg)
	build_source()
	error_no = call(["gcc", "-I"+FRAMEWORK_PATH,
		"-I"+RENDU_PATH,
		RENDU_PATH+"/libft.a", BUILD_MAIN, FRAMEWORK_SOURCE])
	if error_no == 0:
		call([OUT_FILE])

def run_qperez_testsuite():
	print_header("qperez")
	build_source()
	error_no = call(["gcc", "-I", RENDU_PATH, "testsuite_qperez/main.c", RENDU_PATH+"/libft.a"])
	if error_no == 0:
		call(["./a.out"])

def run_moulinator_testsuite():
	print_header("moulinator")
	TEST_SUITE_PATH = "testsuite_moulinator"
	try:
		os.remove("./a.out")
	except OSError:
		pass
	# error_no = call(["gcc", "testsuite_qperez/main.c"]+glob(RENDU_PATH+"/*.c")+["-I"+RENDU_PATH])
	# if error_no == 0:
	# 	error_no = call(["./a.out"])

	# if error_no == 0:
	# Popen(["gcc", "-I", RENDU_PATH, "-c"]+glob(RENDU_PATH+"/*.c"),
	# 	cwd=TEST_SUITE_PATH)
	build_source()
	Popen(["gcc", "-I", RENDU_PATH, "-shared", "-o", "libft.so"]+glob(RENDU_PATH+"/*.o"),
		cwd=TEST_SUITE_PATH)
	call(["./Mouli-nator"],
		cwd=TEST_SUITE_PATH)

def check_forbidden_fn():
	print_header("check_forbidden_fn")
	for path in (glob(RENDU_PATH+"/*.h") + glob(RENDU_PATH+"/*.c")):
		print path
		with open(path) as f:
			content = f.readlines()
			for key, line in enumerate(content):
				matches = re.findall(r"[\w]+(?=\()", line)
				for match in matches:
					if "ft_" in match or match in ['void', 'char', 'malloc', 'free', 'write', 'del', 'f', 'sizeof']:
						continue
					print "{match: <12}: {path} (line {line})".format(match=match, path=path.split("/")[-1], line=key+1)

				matches = re.findall(r"(?<=include [<\"]).*(?=[>\"])", line)
				for match in matches:
					if match in ['stddef.h', 'unistd.h', 'stdlib.h', 'libft.h', 'string.h']:
						continue
					print "{match: <12}: {path} (line {line})".format(match=match, path=path.split("/")[-1], line=key+1)

def check_norm():
	print_header("check_norm")
	call(["norminette"] + glob(RENDU_PATH+"/*.c") + glob(RENDU_PATH+"/*.h"))

if len(sys.argv) == 1:
	print_usage()
else:
	arg = sys.argv[1]
	if arg == '-h' or arg == '--help':
		print_usage()
	elif arg == 'qperez':
		run_qperez_testsuite()
	elif arg == 'moulinator':
		run_moulinator_testsuite()
	elif arg == 'all':
		run_moulitest("bonus")
		run_qperez_testsuite()
		run_moulinator_testsuite()
	elif arg in ["part1", "part2", "bonus", "extra"]:
		run_moulitest(arg)
	elif arg == "check_forbidden_fn":
		check_forbidden_fn()
	elif arg == "check_norm":
		check_norm()
	elif arg == "check_all":
		check_forbidden_fn()
		check_norm()
	else:
		print_usage()
